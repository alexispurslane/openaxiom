#+TITLE: Dice Roller
#+OPTIONS: H:6

#+ATTR_HTML: :class section-icon
[[file:static/dice_roller.svg]]

This page provides a tool for rolling any number of dice with any number of sides. The default roll is 3d6, which is commonly used for skill checks in OpenAxiom. When making a skill check, you roll 3d6 and compare the result to your skill level plus any relevant modifiers.

* Using the Dice Roller
:PROPERTIES:
:ID:       DICE-ROLLER-USAGE
:END:

Enter the number of dice and the number of sides per die in the format "XdY" where X is the number of dice and Y is the number of sides. For example:
- 3d6 rolls three six-sided dice (standard skill check)
- 2d10 rolls two ten-sided dice
- 1d20 rolls one twenty-sided die

For 3d6 skill checks, enter your skill value in the skill test field to see how your roll compares.

* Dice Roller Tool
:PROPERTIES:
:ID:       DICE-ROLLER-TOOL
:END:

#+begin_export html
<div id="dice-roller">
  <div style="margin-bottom: 15px;">
    <label for="dice-input">Dice Notation:</label>
    <input type="text" id="dice-input" value="3d6" placeholder="e.g., 3d6">
  </div>

  <div id="skill-input-container" style="margin-bottom: 15px; display: none;">
    <label for="skill-input">Skill Value:</label>
    <input type="number" id="skill-input" placeholder="e.g., 12" min="0" max="30">
  </div>

  <button id="roll-button">Roll Dice</button>
  <div id="results"></div>
</div>

<script>
function getDegreeOfSuccess(rollTotal, targetNumber) {
  if (rollTotal <= 4) {
    return { degree: "Critical Success", description: "Exceptional performance that exceeds normal capabilities", color: "#28a745" };
  } else if (rollTotal <= targetNumber - 5) {
    return { degree: "Exceptional Success", description: "Above-average performance", color: "#20c997" };
  } else if (rollTotal <= targetNumber) {
    return { degree: "Standard Success", description: "Competent performance", color: "#17a2b8" };
  } else if (rollTotal <= targetNumber + 4) {
    return { degree: "Marginal Failure", description: "Near-success", color: "#ffc107" };
  } else if (rollTotal <= targetNumber + 9) {
    return { degree: "Exceptional Failure", description: "Particularly poor performance", color: "#fd7e14" };
  } else if (rollTotal >= 17) {
    return { degree: "Critical Failure", description: "Catastrophic performance", color: "#dc3545" };
  } else {
    // Fallback for edge cases
    return { degree: "Failure", description: "The action failed", color: "#6c757d" };
  }
}

function rollDice(diceNotation, skillValue) {
  // Parse the dice notation (e.g., "3d6")
  const match = diceNotation.match(/^(\d+)d(\d+)$/i);
  if (!match) {
    alert("Please use the format XdY (e.g., 3d6)");
    return;
  }

  const numDice = parseInt(match[1]);
  const numSides = parseInt(match[2]);

  // Validate input
  if (numDice <= 0 || numDice > 100) {
    alert("Number of dice must be between 1 and 100");
    return;
  }

  if (numSides <= 1 || numSides > 100) {
    alert("Number of sides must be between 2 and 100");
    return;
  }

  // Roll the dice
  const rolls = [];
  let total = 0;
  for (let i = 0; i < numDice; i++) {
    const roll = Math.floor(Math.random() * numSides) + 1;
    rolls.push(roll);
    total += roll;
  }

  // Display results
  let resultsHTML = `
    <div style="display: flex; flex-wrap: wrap; gap: 20px; margin-top: 20px; padding: 20px; background-color: #e9e9e9; border-radius: 8px;">
      <div style="flex: 1; min-width: 200px;">
        <h3 style="margin-top: 0; color: white; text-align: center; background-color: #d63031; border-radius: 4px;">Dice Roll</h3>
        <div style="font-size: 24px; font-weight: bold; margin: 10px 0;">${numDice}d${numSides}</div>
        <div style="display: flex; flex-wrap: wrap; gap: 10px; margin: 15px 0;">
  `;

  // Display individual dice
  rolls.forEach((roll, index) => {
    resultsHTML += `
      <div style="width: 50px; height: 50px; background-color: #d63031; color: white; border-radius: 8px; display: flex; align-items: center; justify-content: center; font-size: 20px; font-weight: bold;">
        ${roll}
      </div>
    `;
  });

  resultsHTML += `
        </div>
        <div style="font-size: 32px; font-weight: bold; color: #333; margin: 15px 0;">
          Total: <span style="color: #d63031;">${total}</span>
        </div>
      </div>
  `;

  // If using 3d6 and skill value is provided, add skill test results
  if (numDice === 3 && numSides === 6 && skillValue && !isNaN(skillValue) && skillValue > 0) {
    const targetNumber = parseInt(skillValue);
    const degree = getDegreeOfSuccess(total, targetNumber);

    // Determine success/failure
    const isSuccess = total <= targetNumber;
    const outcome = isSuccess ? "Success" : "Failure";

    resultsHTML += `
      <div style="flex: 1; min-width: 200px; border-left: 4px solid ${degree.color}; padding-left: 15px;">
        <h3 style="margin-top: 0; color: white; text-align: center; background-color: #d63031; border-radius: 4px;">Skill Test</h3>
        <div style="font-size: 20px; margin: 10px 0;">
          <strong>Skill Value:</strong>
          <span style="font-size: 24px; color: #d63031;">${targetNumber}</span>
        </div>
        <div style="font-size: 20px; margin: 15px 0;">
          <strong>Outcome:</strong>
          <span style="font-size: 24px; font-weight: bold; color: ${isSuccess ? '#28a745' : '#dc3545'};">
            ${outcome}
          </span>
        </div>
        <div style="margin: 15px 0;">
          <div style="font-size: 18px; font-weight: bold; color: ${degree.color};">${degree.degree}</div>
          <div style="font-size: 14px; color: #666; margin-top: 5px;">${degree.description}</div>
        </div>
      </div>
    `;
  }

  resultsHTML += `
    </div>
  `;

  const resultsDiv = document.getElementById("results");
  resultsDiv.innerHTML = resultsHTML;
}

function updateSkillInputVisibility() {
  const diceInput = document.getElementById("dice-input");
  const skillInputContainer = document.getElementById("skill-input-container");

  // Show skill input only for 3d6
  if (diceInput.value.toLowerCase() === "3d6") {
    skillInputContainer.style.display = "block";
  } else {
    skillInputContainer.style.display = "none";
  }
}

document.addEventListener("DOMContentLoaded", function() {
  const rollButton = document.getElementById("roll-button");
  const diceInput = document.getElementById("dice-input");
  const skillInput = document.getElementById("skill-input");

  // Update skill input visibility when dice notation changes
  diceInput.addEventListener("input", updateSkillInputVisibility);

  rollButton.addEventListener("click", function() {
    rollDice(diceInput.value, skillInput.value);
  });

  diceInput.addEventListener("keyup", function(event) {
    updateSkillInputVisibility();
    if (event.key === "Enter") {
      rollDice(diceInput.value, skillInput.value);
    }
  });

  skillInput.addEventListener("keyup", function(event) {
    if (event.key === "Enter") {
      rollDice(diceInput.value, skillInput.value);
    }
  });

  // Initial setup
  updateSkillInputVisibility();
  rollDice(diceInput.value, skillInput.value);
});
</script>

<style>
#dice-roller {
  background-color: #f0f0f0;
  padding: 20px;
  border-radius: 8px;
  margin: 20px 0;
  text-align: center;
}

#dice-input, #skill-input {
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin: 5px 10px 15px 10px;
  width: 100px;
}

#roll-button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #d63031;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

#roll-button:hover {
  background-color: #c12728;
}

#results {
  margin-top: 20px;
}
</style>
#+end_export
